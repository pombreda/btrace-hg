<#assign licenseFirst = "/*">
<#assign licensePrefix = " * ">
<#assign licenseLast = " */">
<#include "../../Licenses/license-${project.license}.txt">

<#if package?? && package != "">
package ${package};

</#if>
import com.sun.btrace.annotations.*;
import static com.sun.btrace.BTraceUtils.*;
import java.net.*;
import java.nio.channels.SocketChannel;

/**
 * This example tracks all server socket creations
 * and client socket accepts.
 */
@BTrace public class ${name} {
    @TLS private static int port = -1;
    @TLS private static InetAddress inetAddr;
    @TLS private static SocketAddress sockAddr;

    @OnMethod(
        clazz="java.net.ServerSocket",
        method="<init>"
    )
    public static void onServerSocket(ServerSocket self, 
        int p, int backlog, InetAddress bindAddr) {
        port = p;
        inetAddr = bindAddr;
    }

    @OnMethod(
        clazz="java.net.ServerSocket",
        method="<init>",
        type="void (int, int, java.net.InetAddress)",
        location=@Location(Kind.RETURN)
    )
    public static void onSockReturn() {
        if (port != -1) {
            println(strcat("server socket at ", str(port)));
            port = -1;
        }
        if (inetAddr != null) {
            println(strcat("server socket at ", str(inetAddr)));
            inetAddr = null;
        }
    }

    @OnMethod(
        clazz="java.net.ServerSocket",
        method="bind"
    )
    public static void onBind(ServerSocket self, SocketAddress addr, int backlog) {
        sockAddr = addr;
    }

    @OnMethod(
        clazz="java.net.ServerSocket",
        method="bind",
        type="void (java.net.SocketAddress, int)",
        location=@Location(Kind.RETURN)
    )
    public static void onBindReturn() {
        if (sockAddr != null) {
            println(strcat("server socket bind ", str(sockAddr)));
            sockAddr = null;
        }
    }

    @OnMethod(
        clazz="sun.nio.ch.ServerSocketChannelImpl",
        method="bind"
    )
    public static void onBind(Object self, SocketAddress addr, int backlog) {
        sockAddr = addr;
    }

    @OnMethod(
        clazz="sun.nio.ch.ServerSocketChannelImpl",
        method="bind",
        type="void (java.net.SocketAddress, int)",
        location=@Location(Kind.RETURN)
    )
    public static void onBindReturn2() {
        if (sockAddr != null) {
            println(strcat("server socket bind ", str(sockAddr)));
            sockAddr = null;
        }
    }

    @OnMethod(
        clazz="java.net.ServerSocket",
        method="accept",
        location=@Location(Kind.RETURN)
    )
    public static void onAcceptReturn(Socket sock) {
        if (sock != null) {
            println(strcat("client socket accept ", str(sock)));
        }
    }

    @OnMethod(
        clazz="sun.nio.ch.ServerSocketChannelImpl",
        method="socket",
        location=@Location(Kind.RETURN)
    )
    public static void onSocket(ServerSocket ssock) {
        println(strcat("server socket at ", str(ssock)));
    }

    @OnMethod(
        clazz="sun.nio.ch.ServerSocketChannelImpl",
        method="accept",
        location=@Location(Kind.RETURN)
    )
    public static void onAcceptReturn(SocketChannel sockChan) {
        if (sockChan != null) {
            println(strcat("client socket accept ", str(sockChan)));
        }
    }
}